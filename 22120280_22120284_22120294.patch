diff --git a/22120280_22120284_22120294.patch b/22120280_22120284_22120294.patch
new file mode 100644
index 0000000..e69de29
diff --git a/Makefile b/Makefile
index 74e454f..95710a0 100644
--- a/Makefile
+++ b/Makefile
@@ -194,6 +194,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_sysinfotest\
 
 
 
diff --git a/a.txt b/a.txt
new file mode 100644
index 0000000..e69de29
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 5247b91..d2eb7ab 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -90,4 +90,15 @@ kalloc(void)
 #endif
   return (void*)r;
 }
+uint64 cal_freemem() {
+    struct run *r;
+    uint64 freemem = 0;
+
+    acquire(&kmem.lock);
+    for (r = kmem.freelist; r; r = r->next)
+        freemem += PGSIZE;
+    release(&kmem.lock);
+
+    return freemem;
+}
 
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..e1385ca 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -299,6 +299,9 @@ fork(void)
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
+  // copy trace_mask
+  np->trace_mask = p->trace_mask; 
+
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
 
@@ -693,3 +696,16 @@ procdump(void)
     printf("\n");
   }
 }
+uint64 cal_nproc() {
+    struct proc *p;
+    uint64 nproc = 0;
+
+    for (p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if (p->state != UNUSED)
+            nproc++;
+        release(&p->lock);
+    }
+
+    return nproc;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..07725e3 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int trace_mask;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..95c3e3e 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -7,6 +7,31 @@
 #include "syscall.h"
 #include "defs.h"
 
+static char *syscall_names[] = {
+    [SYS_fork]    "fork",
+    [SYS_exit]    "exit",
+    [SYS_wait]    "wait",
+    [SYS_pipe]    "pipe",
+    [SYS_read]    "read",
+    [SYS_kill]    "kill",
+    [SYS_exec]    "exec",
+    [SYS_fstat]   "fstat",
+    [SYS_chdir]   "chdir",
+    [SYS_dup]     "dup",
+    [SYS_getpid]  "getpid",
+    [SYS_sbrk]    "sbrk",
+    [SYS_sleep]   "sleep",
+    [SYS_uptime]  "uptime",
+    [SYS_open]    "open",
+    [SYS_write]   "write",
+    [SYS_mknod]   "mknod",
+    [SYS_unlink]  "unlink",
+    [SYS_link]    "link",
+    [SYS_mkdir]   "mkdir",
+    [SYS_close]   "close",
+    [SYS_trace]   "trace"
+};
+
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -101,6 +126,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +153,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
 };
 
 void
@@ -139,6 +168,9 @@ syscall(void)
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    if (p->trace_mask & (1 << num)) {
+            printf("%d: syscall %s -> %ld\n", p->pid, syscall_names[num], (long)p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..3cf707c 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace 22
+#define SYS_sysinfo 23
+
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..b7d83e1 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -503,3 +503,13 @@ sys_pipe(void)
   }
   return 0;
 }
+
+uint64
+sys_trace(void) {
+    int mask = 0;
+    argint(0, &mask);
+        
+    struct proc *ptr = myproc();
+    ptr->trace_mask = mask;
+    return 0;
+}
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..ebdfdf8 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "sysinfo.h"
 
 uint64
 sys_exit(void)
@@ -91,3 +92,19 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+extern uint64 cal_freemem(void);
+extern uint64 cal_nproc(void);
+uint64 sys_sysinfo(void){
+
+  struct sysinfo kinfo;
+  uint64 info;
+  argaddr(0, &info);
+  
+  kinfo.freemem = cal_freemem();
+  kinfo.nproc = cal_nproc();
+  if(copyout(myproc()->pagetable,(uint64)info,(char*)&kinfo,sizeof(struct sysinfo))<0){
+    return -1;
+  }
+  return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index f16fe27..8fe586d 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+struct sysinfo;
+int sysinfo(struct sysinfo*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc109fd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
